plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'bitxon.spring'
version = '1.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2022.0.2'
    }
}

dependencies {
    implementation project(":common-api")
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'

    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    compileOnly("org.projectlombok:lombok")

    runtimeOnly 'org.postgresql:postgresql'

    if (System.getProperty("os.arch") == "aarch64") {
        //TODO find better way to do it conditionally
        runtimeOnly 'io.netty:netty-resolver-dns-native-macos:4.1.92.Final:osx-aarch_64'
    }

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation project(":common-wiremock")
    testImplementation 'org.wiremock:wiremock:3.2.0'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'io.rest-assured:rest-assured'
}

test {
    useJUnitPlatform()
}